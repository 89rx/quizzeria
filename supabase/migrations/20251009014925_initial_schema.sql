-- Create the 'chats' table
CREATE TABLE chats (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security on 'chats' and create a public policy
ALTER TABLE chats ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public chats are viewable by everyone." ON chats FOR ALL USING (true) WITH CHECK (true);

-- Create the 'documents' table
CREATE TABLE documents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT,
  metadata JSONB,
  embedding vector(768)
);

-- Enable Row Level Security on 'documents' and create a public policy
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable all access for all users" ON public.documents FOR ALL USING (true) WITH CHECK (true);

-- Create the search function
CREATE OR REPLACE FUNCTION match_documents (
  query_embedding vector(768),
  match_count INT,
  filter JSONB
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
#variable_conflict use_variable
BEGIN
  RETURN QUERY
  SELECT
    id,
    content,
    metadata,
    1 - (documents.embedding <=> query_embedding) as similarity
  FROM documents
  WHERE metadata @> filter
  ORDER BY documents.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;