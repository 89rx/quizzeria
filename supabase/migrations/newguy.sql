-- 1. Drop everything to ensure a clean slate
DROP FUNCTION IF EXISTS match_documents;
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS chats CASCADE;

-- 2. Re-create the 'chats' table to store parent chat sessions
CREATE TABLE chats (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 3. Re-create the 'documents' table with a TEXT chat_id for composite IDs
CREATE TABLE documents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT,
  metadata JSONB,
  embedding vector(768),
  chat_id TEXT -- This will store IDs like 'parent-uuid_filename.pdf'
);

-- 4. Create the final search function that uses LIKE for pattern matching
CREATE OR REPLACE FUNCTION match_documents (
  query_embedding vector(768),
  match_count INT,
  chat_id_pattern TEXT
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)

ALTER TABLE chats
ADD COLUMN title TEXT;

LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    docs.id,
    docs.content,
    docs.metadata,
    1 - (docs.embedding <=> query_embedding) as similarity
  FROM documents AS docs
  WHERE docs.chat_id LIKE chat_id_pattern
  ORDER BY docs.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;

